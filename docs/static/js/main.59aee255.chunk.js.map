{"version":3,"sources":["components/AddCategory.js","components/GifItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useGifFetch.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","length","cats","charAt","toUpperCase","slice","type","placeholder","value","onChange","target","onClick","setSelectionRange","GifItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","console","log","GifGrid","loading","state","setState","useEffect","then","imgs","useGifFetch","key","GifExpertApp","categories","cat","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAqB9C,OACI,0BAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEIJ,EAAWK,OAAS,IAI1BP,GAAc,SAACQ,GAAD,iBAAcN,EAAWO,OAAO,GAAGC,eAAnC,OAAoDR,EAAWS,MAAM,KAArE,mBAA+EH,OAC7FL,EAAc,OAKV,2BACIS,KAAK,OACLC,YAAc,eACdC,MAAQZ,EACRa,SAtBS,SAACV,GACnBF,EAAeE,EAAEW,OAAOF,QAsBfG,QAAU,SAACZ,GAAD,OAAOA,EAAEW,OAAOE,kBAAkB,EAAGb,EAAEW,OAAOF,MAAMP,aC7BjEY,EAAU,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAC5B,OACI,yBAAKC,UAAU,0CACX,yBAAKC,IAAMF,EAAMG,IAAMJ,IACvB,2BAAKA,K,uBCNJK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACJ,mCAETN,EAHa,iDAGoCO,UAAUF,GAH9C,6BACJ,oCADI,SAKAG,MAAOR,GALP,cAKbS,EALa,gBAMEA,EAAKC,OANP,uBAMZC,EANY,EAMZA,KAEDC,EAAQD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QAI1CkB,QAAQC,IAAIP,GAhBO,kBAiBZA,GAjBY,4CAAH,sDCOPQ,EAAU,SAAC,GAAkB,IAAhBf,EAAe,EAAfA,SAAe,ECHd,SAAEA,GAAe,IAAD,EAEbzB,mBAAS,CAC/B+B,KAAM,GACNU,SAAS,IAJ0B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAmBvC,OAZAC,qBAAU,WAENpB,EAASC,GACJoB,MAAM,SAAAC,GACHH,EAAS,CACLZ,KAAMe,EACNL,SAAS,SAItB,CAAEhB,IAEEiB,EDd0BK,CAAatB,GAAjCW,EAFwB,EAE7BL,KAAaU,EAFgB,EAEhBA,QAErB,OACI,oCACI,4BAAKhB,GAGHgB,GAAW,uBAAGpB,UAAU,oCAAb,cAEb,yBAAKA,UAAU,QAEPe,EAAOH,KAAI,SAACF,GAAD,OACP,kBAAC,EAAD,eACIiB,IAAMjB,EAAKI,IACPJ,UEOjBkB,EA1BM,WAAO,IAAD,EAEajD,mBAAS,IAFtB,mBAEhBkD,EAFgB,KAEJnD,EAFI,KAIvB,OACI,oCACI,8CACA,kBAAC,EAAD,CACIA,cAAiBA,IAErB,6BAEA,4BAEQmD,EAAWjB,KAAI,SAAAkB,GAAG,OACd,kBAAC,EAAD,CACIH,IAAMG,EACN1B,SAAW0B,U,MCdvCC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.59aee255.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    // handle input change\r\n    const handleChange = (e) => {\r\n       setInputValue( e.target.value );\r\n    }\r\n\r\n    // handle ENTER, submit\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (!(inputValue.length > 2)) {\r\n            return;\r\n        }\r\n\r\n        setCategories((cats) => [`${inputValue.charAt(0).toUpperCase()}${ inputValue.slice(1) }`, ...cats]);\r\n        setInputValue(''); \r\n    }\r\n\r\n    return(\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                placeholder = \"Add category\"\r\n                value={ inputValue }\r\n                onChange={ handleChange }\r\n                onClick={ (e) => e.target.setSelectionRange(0, e.target.value.length) }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n// Prop types\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","import React from 'react';\r\n\r\nexport const GifItem = ({title, url}) => {\r\n    return(\r\n        <div className=\"card animate__animated animate__fadeIn\">  \r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}","export const getGifs = async (category) => {\r\n    const apiKey = 'd50nWkDCfjhEfVgJIE9WYClyFqqYuGkZ';\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=${ apiKey }`;\r\n\r\n    const resp = await fetch( url );\r\n    const {data} = await resp.json();\r\n\r\n    const gifs =  data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    console.log(gifs);\r\n    return gifs;\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { GifItem } from './GifItem';\r\n// hooks\r\nimport { useGifFetch } from '../hooks/useGifFetch';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useGifFetch( category );\r\n\r\n    return(\r\n        <>\r\n            <h2>{category}</h2>\r\n\r\n            {/* { loading ? 'Loading...' : null } */}\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\r\n\r\n            <div className=\"grid\">\r\n                {\r\n                    images.map((data) => (\r\n                        <GifItem\r\n                            key={ data.id }\r\n                            {...data}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired\r\n}\r\n\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useGifFetch = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                }); \r\n            });\r\n            \r\n    }, [ category ]);\r\n\r\n    return state;\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    return(\r\n        <>\r\n            <h1>Gif Expert App</h1>\r\n            <AddCategory \r\n                setCategories = {setCategories} \r\n            />\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(cat => (\r\n                        <GifGrid \r\n                            key={ cat } \r\n                            category={ cat }\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}