{"version":3,"sources":["components/AddCategory.js","components/GifItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useGifFetch.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","length","cats","charAt","toUpperCase","slice","type","placeholder","value","onChange","target","onClick","setSelectionRange","GifItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","console","log","GifGrid","loading","state","setState","useEffect","then","imgs","useGifFetch","key","GifExpertApp","defaultCategories","categories","cat","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAqB9C,OACI,0BAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEIJ,EAAWK,OAAS,IAI1BP,GAAc,SAACQ,GAAD,iBAAcN,EAAWO,OAAO,GAAGC,eAAnC,OAAoDR,EAAWS,MAAM,KAArE,mBAA+EH,OAC7FL,EAAc,OAKV,2BACIS,KAAK,OACLC,YAAc,aACdC,MAAQZ,EACRa,SAtBS,SAACV,GACnBF,EAAeE,EAAEW,OAAOF,QAsBfG,QAAU,SAACZ,GAAD,OAAOA,EAAEW,OAAOE,kBAAkB,EAAGb,EAAEW,OAAOF,MAAMP,aC5BjEY,EAAU,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAC5B,OACI,yBAAKC,UAAU,0CACX,yBAAKC,IAAMF,EAAMG,IAAMJ,IACvB,2BAAKA,K,uBCPJK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACJ,mCAETN,EAHa,iDAGoCO,UAAUF,GAH9C,6BACJ,oCADI,SAKAG,MAAOR,GALP,cAKbS,EALa,gBAMEA,EAAKC,OANP,uBAMZC,EANY,EAMZA,KAEDC,EAAQD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QAI1CkB,QAAQC,IAAIP,GAhBO,kBAiBZA,GAjBY,4CAAH,sDCOPQ,EAAU,SAAC,GAAkB,IAAhBf,EAAe,EAAfA,SAAe,ECHd,SAAEA,GAAe,IAAD,EAEbzB,mBAAS,CAC/B+B,KAAM,GACNU,SAAS,IAJ0B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAmBvC,OAZAC,qBAAU,WAENpB,EAASC,GACJoB,MAAM,SAAAC,GACHH,EAAS,CACLZ,KAAMe,EACNL,SAAS,SAItB,CAAEhB,IAEEiB,EDd0BK,CAAatB,GAAjCW,EAFwB,EAE7BL,KAAaU,EAFgB,EAEhBA,QAErB,OACI,oCACI,4BAAKhB,GAGHgB,GAAW,uBAAGpB,UAAU,oCAAb,cAEb,yBAAKA,UAAU,QAEPe,EAAOH,KAAI,SAACF,GAAD,OACP,kBAAC,EAAD,eACIiB,IAAMjB,EAAKI,IACPJ,UEOjBkB,EA1Ba,SAAC,GAAgC,IAAD,IAA7BC,yBAA6B,MAAT,GAAS,IAEpBlD,mBAASkD,GAFW,mBAEjDC,EAFiD,KAErCpD,EAFqC,KAIxD,OACI,oCACI,8CACA,kBAAC,EAAD,CACIA,cAAiBA,IAErB,6BAEA,4BAEQoD,EAAWlB,KAAI,SAAAmB,GAAG,OACd,kBAAC,EAAD,CACIJ,IAAMI,EACN3B,SAAW2B,U,MCdvCC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.d40d831d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    // handle input change\n    const handleChange = (e) => {\n       setInputValue( e.target.value );\n    }\n\n    // handle ENTER, submit\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (!(inputValue.length > 2)) {\n            return;\n        }\n\n        setCategories((cats) => [`${inputValue.charAt(0).toUpperCase()}${ inputValue.slice(1) }`, ...cats]);\n        setInputValue(''); \n    }\n\n    return(\n        <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\"\n                placeholder = \"Search Gif\"\n                value={ inputValue }\n                onChange={ handleChange }\n                onClick={ (e) => e.target.setSelectionRange(0, e.target.value.length) }\n            />\n        </form>\n    )\n}\n\n// Prop types\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const GifItem = ({title, url}) => {\n    return(\n        <div className=\"card animate__animated animate__fadeIn\">  \n            <img src={ url } alt={ title } />\n            <p>{ title }</p>\n        </div>\n    )\n}\n\nGifItem.propTypes = {\n    title: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired\n}","export const getGifs = async (category) => {\n    const apiKey = 'd50nWkDCfjhEfVgJIE9WYClyFqqYuGkZ';\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=${ apiKey }`;\n\n    const resp = await fetch( url );\n    const {data} = await resp.json();\n\n    const gifs =  data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    console.log(gifs);\n    return gifs;\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { GifItem } from './GifItem';\n// hooks\nimport { useGifFetch } from '../hooks/useGifFetch';\n\nexport const GifGrid = ({ category }) => {\n\n    const { data:images, loading } = useGifFetch( category );\n\n    return(\n        <>\n            <h2>{category}</h2>\n\n            {/* { loading ? 'Loading...' : null } */}\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\n\n            <div className=\"grid\">\n                {\n                    images.map((data) => (\n                        <GifItem\n                            key={ data.id }\n                            {...data}\n                        />\n                    ))\n                }\n            </div>\n\n        </>\n    )\n}\n\nGifGrid.propTypes = {\n    category: PropTypes.string.isRequired\n}\n\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\n\nexport const useGifFetch = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n\n        getGifs( category )\n            .then( imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                }); \n            });\n            \n    }, [ category ]);\n\n    return state;\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = ({ defaultCategories = [] }) => {\n\n    const [categories, setCategories] = useState(defaultCategories);\n\n    return(\n        <>\n            <h1>Gif Expert App</h1>\n            <AddCategory \n                setCategories = {setCategories} \n            />\n            <hr />\n\n            <ol>\n                {\n                    categories.map(cat => (\n                        <GifGrid \n                            key={ cat } \n                            category={ cat }\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}